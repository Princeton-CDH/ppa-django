# Sample local settings
# Copy to derrida/local_settings.py and configure
# includes sensitive configurations, should *not* be
# checked into version control

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Configure internal IPs for access to view debug toolbar
# INTERNAL_IPS = ['127.0.0.1']

ALLOWED_HOSTS = []

# SECURITY WARNING: keep the secret key used in production secret!
# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''


# Email address for a technical contact.
# If set, will be used in From header for HathiTrust API requests
# TECHNICAL_CONTACT = ''


# Turn this on in test/QA site to show test banner
#SHOW_TEST_WARNING = True

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
DATABASES = {
    # sqlite for development
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # mysql for qa/prod
    # 'default': {
    #     "ENGINE": "django.db.backends.mysql",
    #     'NAME': '',
    #     'USER': '',
    #     'PASSWORD': '',
    # }
}

SOLR_CONNECTIONS = {
    'default': {
        'URL': 'http://localhost:8983/solr/',
        'COLLECTION': 'ppa',
        'CONFIGSET': 'ppa',
        'TEST': {
            'COMMITWITHIN': 100
        }
    }
}

# local path to hathi pairtree data provided via rsync
HATHI_DATA = '/path/to/hathi_pairtree_root'
# for development, optionally override HathiTrust dataset rsync server and path
# HATHITRUST_RSYNC_SERVER = ''
# HATHITRUST_RSYNC_PATH = ''



# CAS login configuration
CAS_SERVER_URL = ''

PUCAS_LDAP.update({
    'SERVERS': [],
    'SEARCH_BASE': '',
    'SEARCH_FILTER': "(uid=%(user)s)",
})


# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL.strip("/"))

# Admin email configuration for error messages
# ADMINS = [('name', 'email')]
# SERVER_EMAIL = '

# Email configuration for sending messages
# EMAIL_SUBJECT_PREFIX = '[PPA] '

# Turn on Google Analytics (or not) via property id
# GTAGS_ANALYTICS_ID = 'UA-property-id'

# Solution following https://stackoverflow.com/a/9541647
# Sends a logging email even when DEBUG is on
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'basic': {
            'format': '[%(asctime)s] %(levelname)s:%(name)s::%(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'basic',
            'level': 'DEBUG'

        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARN'),
        },
        'ppa':  {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
        'SolrClient':  {
            'handlers': ['console'],
            'level': 'WARN'
        },
    }
}

# https://github.com/mozilla/django-csp
# Content security policy controls - see `settings.py` for policy settings.
# In development, leave both lines commented out to block & not report.
# In QA, set REPORT_ONLY to True and specify a "report-only" endpoint.
# In production, set REPORT_ONLY to False and specify an "enforced" endpoint.
# CSP_REPORT_ONLY = False
# CSP_REPORT_URI = ''

# Turn off caching for static assets
WEBPACK_LOADER['DEFAULT']['CACHE'] = False
