# configurations that should not be checked into version control
# Copy to ppa/settings/local_settings.py and configure

import os

# SECURITY WARNING: keep the secret key used in production secret!
# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''

# Email address for a technical contact.
# If set, will be used in From header for HathiTrust API requests
# TECHNICAL_CONTACT = ''

# Turn this on in test/QA site to show test banner
# SHOW_TEST_WARNING = True

# Database
# override default database settings as needed
# default name and user are both "ppa"
# DATABASES["default"]["NAME"] = ""
# DATABASES["default"]["USER"] = ""
DATABASES["default"]["PASSWORD"] = "pass!@#$"

# override default Solr configuration as needed
# default collection and configset are both "ppa"
SOLR_CONNECTIONS["default"].update(
    {
        "URL": "http://localhost:8983/solr/",
#        "COLLECTION": "ppa",
#        "CONFIGSET": "ppa",
        "TEST": {"COMMITWITHIN": 100},
    }
)

# local path to hathi pairtree data provided via rsync
HATHI_DATA = '/path/to/hathi_pairtree_root'
# for development, optionally override HathiTrust dataset rsync server and path
# HATHITRUST_RSYNC_SERVER = ''
# HATHITRUST_RSYNC_PATH = ''

# username for Gale API access
GALE_API_USERNAME = ''

# local path for cached marc record; needed for Gale/ECCO import
MARC_DATA = ''


# CAS login configuration
CAS_SERVER_URL = ''

PUCAS_LDAP.update({
    'SERVERS': [],
    'SEARCH_BASE': '',
    'SEARCH_FILTER': "(uid=%(user)s)",
})

# Admin email configuration for error messages
# ADMINS = [('name', 'email')]
# SERVER_EMAIL = '

# Email configuration for sending messages
# EMAIL_SUBJECT_PREFIX = '[PPA] '

# Turn on Google Analytics (or not) via property id
# GTAGS_ANALYTICS_ID = 'UA-property-id'

# Solution following https://stackoverflow.com/a/9541647
# Sends a logging email even when DEBUG is on
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'basic': {
            'format': '[%(asctime)s] %(levelname)s:%(name)s::%(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'basic',
            'level': 'DEBUG'

        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARN'),
        },
        'ppa':  {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
        'SolrClient':  {
            'handlers': ['console'],
            'level': 'WARN'
        },
    }
}
